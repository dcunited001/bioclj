(ns bioclj.t-string
  (:require [clojure.java.io :as io])
  (:use [midje.sweet]
        [bioclj.string]))

(facts "acgt-str-to-64b && acgt-64b-to-str"
       (let [seq1 "ACGTACGTACGTACGTACGTACGTACGTACGT"
             long1 1953184666628070171]
         (fact "should be reversible"
               (acgt-str-to-64b seq1) => long1
               (acgt-64b-to-str 32 long1) => (vec seq1))
         (fact "can encode nucleotide sequences of multiple lengths"
               (acgt-64b-to-str 4 long1) => (vec "ACGT")
               (acgt-64b-to-str 8 long1) => (vec "ACGTACGT"))))

(facts "acgt-to-64b"
       (let [seq1 "ACGTACGTACGTACGTACGTACGTACGTACGTTCGATCGATCGATCGATCGATCGATCGATCGAACGTACGT"
             longs1 (acgt-to-64b seq1)]
         (fact "should be reversible"
               (acgt-from-64b (first longs1) (rest longs1)) => (vec seq1))))

(facts "hamming-b64"
       (let [s1 (acgt-str-to-64b "ACGT")
             s2 (acgt-str-to-64b "AAAA")
             s3 (acgt-str-to-64b "AAAATTTT")
             s4 (acgt-str-to-64b "AATTTTGG")]
         (fact "can compare sequences of equal length accurately"
               (hamming-64b s1 s2) => 3
               (hamming-64b s3 s4) => 4)
         (fact "can compare sequences of varied length, given k"
               (hamming-64b 4 s2 s3) => 0
               (hamming-64b 4 s1 s4) => 2)))

(facts "neighborhood-64b-acgt"
       (let [s1 (acgt-str-to-64b "AA")
             n1 (sort (map acgt-str-to-64b '("AC" "AT" "AG" "CA" "TA" "GA" "AA")))
             s2 (acgt-str-to-64b "AAA")
             n2 (sort (map acgt-str-to-64b '("CAA" "TAA" "GAA" "AAA" "AGA" "ACA" "ATA" "AAG" "AAT" "AAC")))]
         (fact "generates a matching neighborhood of an ACGT string"
               (sort (:b64 (neighborhood-acgt-64b 2 1 s1))) => n1
               (sort (:b64 (neighborhood-acgt-64b 3 1 s2))) => n2)
         (fact "generates a neighborhood with the appropriate counts"
               (count (:b64 (neighborhood-acgt-64b 2 1 s1))) => 7
               (count (:b64 (neighborhood-acgt-64b 2 2 s1))) => 16
               (count (:b64 (neighborhood-acgt-64b 3 1 s2))) => 10
               (count (:b64 (neighborhood-acgt-64b 3 2 s2))) => 37
               (count (:b64 (neighborhood-acgt-64b 3 3 s2))) => 64)
         (fact "neighborhoods include the input string itself"
               (.contains (:b64 (neighborhood-acgt-64b 2 1 s1)) s1) => true
               (.contains (:b64 (neighborhood-acgt-64b 3 2 s2)) s2) => true))
       (let [s1 (acgt-str-to-64b "GGCCCAGAG")
             seqs ["GGCACAGAT" "GTCCTACAG" "GTATCAGAG" "GGATCTGAG" "GTCCTTGAG" "GGCACAGAG" "GGCACAGAC" "GGCACAGAA" "GGCGCGTAG" "TGCCGAGAA" "GTCACAAAG" "GGCTCCTAG" "AGGCCAGGG" "GCCGCACAG" "AGAACAGAG" "GGAGCGGAG" "GGGCGAGAC" "GGTACTGAG" "GTCCCACCG" "GTCCCCGAT" "CGCACAGTG" "GGCCCCCGG" "GGGCGCGAG" "TGCTCAGGG" "GTCCCCGAC" "GTCCCCGAA" "GTCCCCGAG" "GGCCAGAAG" "TGTCCATAG" "ATTCCAGAG" "GGGCAAGAT" "CGCCTATAG" "GACCGTGAG" "AGCCCTGTG" "GGGCCGGCG" "GGGCAAGAG" "GGGCAAGAC" "GGGCAAGAA" "TGCCCTGAT" "CTCCCATAG" "CGTCTAGAG" "GGACCTCAG" "CACCCTGAG" "CGCCCCGCG" "GTCCCAGGC" "TGCCCTGAG" "GTCCCAGGA" "TGCCCTGAA" "GTCCCAGGG" "TGCCCTGAC" "GACTCAGGG" "GGACCATTG" "TCCCCAGCG" "GGCCCCAAT" "GGCCATGGG" "GTAGCAGAG" "GGCCGATCG" "AGCCGACAG" "GGATCAGGG" "GGCGTACAG" "AGCCGATAG" "AGCCAAGGG" "GGTCCTGTG" "GCCCCATTG" "CGGCCAAAG" "GGCGCGCAG" "GACGCAGCG" "GGTCGAGTG" "GGCGCAGAT" "CGCCCAAGG" "GGCCTGTAG" "TGCGCAGAT" "GTGCCTGAG" "GGCGCAGAG" "GACGTAGAG" "GGCGCAGAA" "GGCGCAGAC" "TGCGCAGAG" "TGCGCAGAC" "GGCGCATGG" "GGCAGGGAG" "GGCCATCAG" "ACTCCAGAG" "GGAAGAGAG" "GGCTACGAG" "AGCTCAAAG" "CGCCCATTG" "GATACAGAG" "GGCTCTAAG" "TGCCCAACG" "GGCTTAGAC" "GGTCCGGAA" "GGCTTAGAA" "TGGCCGGAG" "GGCTTAGAG" "GGTCCGGAG" "GCCCTACAG" "GGTCCGGAT" "CGCCCGGCG" "GGCTTAGAT" "GGGCCCTAG" "GGCCTGGCG" "GAGGCAGAG" "GATCCAAAG" "GAAGCAGAG" "GGCCTTGGG" "GTCTCATAG" "GCTCTAGAG" "GGTGCCGAG" "GGCCCCTGG" "GGCTCCGGG" "GGCCTAATG" "GGCCGGGAT" "GGCTGAAAG" "GACAGAGAG" "GGTGAAGAG" "GCCCCCCAG" "GACCTAGGG" "CTCCGAGAG" "GACTGAGAG" "TACCCTGAG" "GGGCCAGGG" "TGCCCAGGG" "GGCGGAAAG" "AGACCAGAT" "TGCCCAGGC" "GGCCCAGAA" "GGCCGCAAG" "TACCCACAG" "GGCCCAGAG" "AGACCAGAA" "GGACCTTAG" "AGACCAGAC" "AGACCAGAG" "GGCCCAGAT" "GACCCTCAG" "GATCCAGCG" "TGCCCTCAG" "GGACAAGAG" "GGCCCGGTG" "GGACAAGAA" "GGCCCGGTA" "GGACAAGAC" "GGCCCGGTC" "GGCATCGAG" "GGCTCAACG" "GGAGCCGAG" "GGCCCGGTT" "TGCCCGGGG" "AGCACAGTG" "GGACCGTAG" "GAGCCGGAG" "GAGCAAGAG" "AGCCCCGGG" "TGCCGACAG" "GACCAAGTG" "AGCGCCGAG" "GGGGCAGCG" "CGTCCAGAG" "GTCCCTGAT" "CGTCCAGAC" "CGTCCAGAA" "GGTCTAGGG" "GACCCACAG" "ATCCCAGAT" "GTACCCGAG" "GTCCCTGAG" "CCCCCTGAG" "CGTCCAGAT" "GTCCCTGAC" "GTCCCTGAA" "ATCCCAGAG" "AGCGCAGCG" "GGTAAAGAG" "ATCCCAGAA" "GGCGCTGGG" "GACTCATAG" "GAGCCACAG" "AGACGAGAG" "CGCGCATAG" "TGCCCGTAG" "AGGTCAGAG" "AGCCCGCAG" "GGCCTCAAG" "GGGCCCGCG" "GCACCATAG" "AGCCCAGGT" "CGACCAGTG" "GGCTCAGAA" "GGCTCAGAC" "GGTTCAGCG" "GGCTCAGAT" "AGCCCAGGG" "GTCACCGAG" "AGCCCAGGA" "AGCCCAGGC" "AGCCCTGGG" "GGCCGAACG" "CATCCAGAG" "TCCCCAAAG" "GGACGAGGG" "GGCGCAGCT" "GTCCCGCAG" "GACACAGAA" "GACACAGAC" "GACACAGAG" "GGCACAGCG" "AGCCCCCAG" "GACACAGAT" "GGCCGGGGG" "GGACCAGGT" "GCCCAACAG" "TGGTCAGAG" "GGGCTACAG" "GCACCAGCG" "GGCTCATCG" "GGACCAGTT" "GGACCAGGG" "GGACCAGGA" "GGACCAGGC" "TGTCCACAG" "GTGCGAGAG" "GGCCCTATG" "GACGCATAG" "TGCCTACAG" "CGGACAGAG" "GGGCCAAGG" "AGCTCAGCG" "CGCCAACAG" "GGCACTCAG" "GACGGAGAG" "GTCCCCGTG" "GTCGCTGAG" "GGACCCGGG" "TGCACTGAG" "GCCCCACCG" "GGCCCCCTG" "GTACCAGGG" "GAATCAGAG" "GGTCGAGGG" "GGCCGACAA" "GGCCGACAC" "GGCATAAAG" "GGCCGACAG" "GGCAGAAAG" "ATCTCAGAG" "AACCTAGAG" "TGTTCAGAG" "GGCCGACAT" "GCCAAAGAG" "GGACCATCG" "GGACCAGTG" "GTCCCAGGT" "GGCAAAGGG" "GGCCTAGAG" "GGTACATAG" "GGCCTAGAC" "GGCTCCAAG" "GCGCGAGAG" "TGCCCAAAG" "GGAGAAGAG" "GCCCCAAAT" "CGCCCAGTC" "CGCCCAGTA" "CGCCCAGTG" "CGCCCTGCG" "GCCCCAAAG" "CGCCATGAG" "GCCCCAAAC" "GGACCAGTC" "GCCTCCGAG" "AGCCTAAAG" "CGCCCAGTT" "CTCCTAGAG" "GGCCCGAAT" "GGTCCTGAG" "GGTCCTGAA" "GGTCCTGAC" "GCCCCATGG" "GGCTCACTG" "GGTCCTGAT" "GGCCCGAAG" "GGCCAACTG" "GGCCCGAAA" "GGCCCGAAC" "GGTCCCAAG" "CGACTAGAG" "GGACTGGAG" "TGTACAGAG" "GGCCTAACG" "GTCCGGGAG" "TGACCAGTG" "TGCATAGAG" "TAGCCAGAG" "CGCCGAGGG" "GACCCCGGG" "GTCTCACAG" "GGAGCAGGG" "AGCGCAGGG" "GTCCAAGCG" "GTGCAAGAG" "AGCGAAGAG" "GTTCCAGAT" "AGTCTAGAG" "GCTCCACAG" "CCACCAGAG" "GGTCCCGCG" "CGCCGACAG" "GGCTGACAG" "TGCCCACTG" "GTTCCAGAG" "GTTCCAGAC" "GTTCCAGAA" "AGCCCCGTG" "TTCCCAGAC" "GGCCCGCCG" "TTCCCAGAG" "GTACCAAAG" "AACCCAGCG" "TTCCCAGAT" "GACCAAGAG" "GACCAAGAA" "GACCAAGAC" "GACCCAGGG" "GACCCAGGA" "GGGCCATTG" "GGTCAAGGG" "GTCCAAAAG" "GACCCAGGT" "AGCCTCGAG" "GCAACAGAG" "GACCAAGAT" "TGGCCAGTG" "GCCCGAGGG" "AGTTCAGAG" "AGCCCTCAG" "GGAACAGCG" "GTCCGATAG" "GCGCCAGCG" "GGACCGCAG" "GGCCCTAGG" "GGCCCCACG" "CGACCAGCG" "GGGTCAGGG" "GGCCCTTGG" "GGCCCCGGA" "GGCCCCGGC" "GGTACGGAG" "GGCCCCGGG" "CGCTCAGAC" "TGCCCCGAT" "GGCCCCAGG" "GGCCCCGGT" "GGTACAGTG" "TGCCCCGAG" "GGTCTAGTG" "TGCCCCGAC" "CGCCCAGCG" "GGGCCGGAC" "GGGCCGGAA" "GGGCCGGAG" "GCCGGAGAG" "GGGCCGGAT" "GGCAAGGAG" "CGCCCGGAT" "GGGGCAGTG" "GGCACAGGG" "GGCACAGGA" "GGTCCATAT" "GGCACAGGC" "CGCCCGGAC" "CGCCCGGAA" "CGCCCGGAG" "GGTCCAACG" "GTCCCAAGG" "GGTCCATAA" "GGCACAGGT" "GGTCCATAC" "GGTCCATAG" "GGCACCGGG" "CGCCTAGAT" "GGCCCTCGG" "TACCCAGTG" "AGTCCAGAA" "GGCGTATAG" "AGTCCAGAC" "CGCCTAGAC" "CGCCTAGAA" "GTGCCATAG" "CGCCTAGAG" "GTCCCCGCG" "AGTCCAGAT" "GTCCCACAA" "GTCCCACAC" "GGACCCGTG" "GTCCCACAG" "GACCCTGTG" "AGCCCAGTG" "GACCCGAAG" "AGCCCAGTA" "AGCCCAGTC" "GGCCGTCAG" "GGCATTGAG" "AGCCCAGTT" "GGGCAAGGG" "TGCCGCGAG" "CGCGCTGAG" "CGACCATAG" "GGCACTGTG" "GGCCAAGCT" "GACTCAGAT" "CGCCCCGAG" "GGCCCAGCC" "AGTGCAGAG" "CGCCCCGAC" "GTCACACAG" "GCCACAGGG" "GGCGCAGTG" "GACTCAGAG" "GGCCAAGCG" "GGCCAAGCA" "GACTCAGAC" "GGCCAAGCC" "GACTCAGAA" "TGCCCTTAG" "CGCCCCGAT" "TGCGGAGAG" "TCCCCAGAC" "CGCCCACGG" "GGCTCGGTG" "GGCCGGGTG" "GGATCAGAT" "TGCCCTGCG" "GTGCCGGAG" "GGCCCGTGG" "GTCCTCGAG" "GGATCAGAG" "GGATCAGAC" "GGATCAGAA" "AGCCAAGAT" "GGACTAGCG" "GTCCTAGAT" "AGCCAAGAG" "AGCCAAGAA" "AGCCAAGAC" "GCCCGCGAG" "GGGCCAATG" "GACGCAGAT" "GGCACAGCC" "AGACCATAG" "GACGCAGAC" "GACGCAGAA" "GTCCCTTAG" "GACGCAGAG" "TGCACGGAG" "GGTCCAGGT" "TGACCAGGG" "GGCGCATAT" "GGGATAGAG" "TGACAAGAG" "GGTCCAGGG" "GGTCCAGGA" "GGTCCAGGC" "GGCGCATAG" "TCCACAGAG" "GGCGCATAC" "GGCGCATAA" "GGCGCAGCC" "GGCGCAGCA" "GCCCAATAG" "GGCGCAGCG" "GGACAATAG" "GACCCAATG" "TGCCCACGG" "GGCTTAAAG" "GCCCCGTAG" "CGGCCAGAT" "AGCTTAGAG" "CCCACAGAG" "GGTCCGGGG" "TGCCCAAAT" "GGCTCATGG" "TGCGCAGCG" "CGGCCAGAA" "CGGCCAGAC" "CGGCCAGAG" "TGCCCAAAA" "GTCCCGTAG" "TGCCCAAAC" "GGACCAGTA" "GGCCCGCTG" "GGCCATTAG" "GACACATAG" "GAGCCAAAG" "TCCTCAGAG" "AACCCAGTG" "GCTCCATAG" "GGCCCATAT" "AGCCCCGAG" "TGCGCAAAG" "AGCCCCGAA" "GGCCCAGTT" "AGCCCCGAC" "GGCCCATAC" "GGCACGCAG" "GGCCCATAA" "GGCCCATAG" "GCCCCTTAG" "AGCCCCGAT" "ATCCGAGAG" "AGCTCACAG" "CGCGCAGTG" "GGCCCAGCG" "GGGCGACAG" "CTCCCAGTG" "TGCAAAGAG" "GGCCCAGCA" "AGACCAGCG" "GCCCTATAG" "CGCACAGCG" "GATCCAGAC" "GGATGAGAG" "TACCAAGAG" "GGACAAGCG" "GGCAATGAG" "GATCCAGAT" "GTCGCATAG" "CCCCCAGGG" "GATCCAGAG" "GATCCAGAA" "GGCGCTAAG" "ACCGCAGAG" "GTGTCAGAG" "AGCCCACGG" "AGCCCTTAG" "GGGACAGCG" "GCCACATAG" "GGCTATGAG" "CGCGCAGCG" "GGTCTAGAG" "GGTCTAGAA" "GGCGGAGAT" "GGTCTAGAC" "GGCCCCGTA" "GGCCCCGTC" "GGCCCCGTG" "GGCGGAGAA" "GACCCTAAG" "GGCGGAGAC" "ATCCCAGCG" "GGTACAGCG" "GGCGGAGAG" "CGTCCAGCG" "GGCCGCCAG" "TACCCAAAG" "TGCCCGCAG" "GGCCTTTAG" "GGCTCTGAC" "GTCCCTGGG" "GGCCCATTC" "GCCCGGGAG" "GGACTACAG" "TGCGCAGAA" "GGGTAAGAG" "TGCTCATAG" "GGGCCCGAG" "CCCCAAGAG" "GGGCCCGAA" "CACCCAGAC" "CACCCAGAA" "CACCCAGAG" "TGGCCAGAC" "GGGCCCGAT" "GGCACAATG" "GTTACAGAG" "CGCTCACAG" "CACCCAGAT" "GGCCGAAAG" "GGAACTGAG" "GGCCGAAAC" "GGCGAGGAG" "GAAACAGAG" "TTCACAGAG" "GGTTCAGAG" "GGCTCTGCG" "GGCCGAAAT" "GGGCCACGG" "GGTTCAGAT" "GTCCCAGTG" "GTCCCAGTC" "GTCCCAGTA" "GACACAGCG" "GACCCTGCG" "ATCCCAAAG" "AGCCGCGAG" "GTCCCAGTT" "CGCCCACTG" "GGGCAAGTG" "GGTCCACTG" "GGGTCGGAG" "GCACCAGAC" "GCACCAGAA" "GCACCAGAG" "GGCGAAGAA" "GGCTCATAG" "GGCTCATAC" "GGCTCATAA" "CGGCCATAG" "GGCACTAAG" "TCTCCAGAG" "GGCTCTCAG" "GGTTCAAAG" "GCACCAGAT" "GGTCCACAC" "GGCTCATAT" "GCGCCAGTG" "GACCCACTG" "GCCACCGAG" "GGACCACGG" "TGGCCAGGG" "GGAGCAGAC" "GCCCCCGCG" "GGTACAAAG" "CCCCCGGAG" "GGACCCGAG" "CTTCCAGAG" "TCCCCACAG" "GGACCCGAC" "GGTCTAGAT" "GGACCCGAT" "GACCGAGGG" "GGACCTAAG" "GACCTACAG" "GGTCGAGAG" "GGTCGAGAC" "ACCCCATAG" "GGCCGACCG" "GGCCCGACG" "GGTCGAGAT" "GGCAAAGAG" "GGCCTAGCG" "GGCAAAGAA" "GGCCTAGCA" "GGCAAAGAC" "GGCCTAGCC" "GGACCATAT" "GGCACTGCG" "TGTCCAAAG" "GGCCTAGCT" "GGCAAAGAT" "GACACTGAG" "GTCGGAGAG" "GGACCATAA" "GGACCATAC" "GGTCCGGAC" "TGCCTAAAG" "CACCTAGAG" "GGACCTGCG" "GGCCACGGG" "GCCCCATAG" "CGCTGAGAG" "GCCCCATAC" "GCCCCATAA" "GCCCCAAGG" "GCCCCATAT" "GCCTCTGAG" "GGTCCTGCG" "GGCTCCCAG" "GCCCCGGCG" "GGGCATGAG" "GGCAGACAG" "GGTGCGGAG" "GGCCTAGTC" "GCCCAAGCG" "GGCAGTGAG" "GTCACAGGG" "GGCCTAAAA" "GACCCACGG" "GGCCTAAAC" "CGCCAGGAG" "GACCCCGAT" "CCCCCCGAG" "TGCCGAGTG" "AGTACAGAG" "AGCCCGAAG" "GAGCCTGAG" "GACCCCGAG" "GCCATAGAG" "GACCCCGAA" "GACCCCGAC" "TGAGCAGAG" "GTCACATAG" "CACACAGAG" "TGGCGAGAG" "GGCTCGGGG" "GTTCCAGGG" "TGTCCAGCG" "GAACCAGAA" "TACCCCGAG" "GAACCAGAC" "GGCCCGCAG" "GAACCAGAG" "GGTCCCGAG" "AGCACAGGG" "GGTCCCGAA" "GGTCCCGAC" "GAACCAGAT" "GGCCCGCAT" "GGTCCCGAT" "GGCCTAGTT" "GAGCCCGAG" "GGGTTAGAG" "CGCCAAGTG" "TGCCAACAG" "GGCCAAGGA" "GTCTCAAAG" "GTCCTAGGG" "GGGCCCGAC" "GACCAAGCG" "GGGCACGAG" "GGTCGAGCG" "CGCTCAGGG" "GGGCCTGAC" "GGGCCTGAA" "GGGCCTGAG" "GGCGATGAG" "GGGCCTGAT" "GGCCCTTAT" "CGCCAATAG" "CGCCGAAAG" "GGACGAGTG" "GGCTTGGAG" "GGCTAGGAG" "GGCCCTGGT" "TGGCTAGAG" "CGACCAGAT" "GGGCCACTG" "GGCCCTTAG" "GGCCCTTAA" "GGCCCTTAC" "CGACCAGAC" "GGCCCTGGA" "CGACCAGAA" "GGCCCTGGC" "CGACCAGAG" "TTCCCAAAG" "GGCCCTGGG" "AGACCTGAG" "GGTGCAGTG" "ACCCCAGCG" "AGCCACGAG" "CGTCCAAAG" "GACTTAGAG" "GGCTGCGAG" "GTTCTAGAG" "AGCCCTAAG" "TGCTCAGCG" "GTCCAACAG" "GCCCCAGTT" "GCCCCTGAT" "GCACGAGAG" "GCCCCAGTC" "GCCCCAGTA" "GCCCCAGTG" "GCCCCTGAC" "GCCCCTGAA" "CGTGCAGAG" "AGGCCAGCG" "TGCACAGCG" "CGCCAAGCG" "CGCCCAGGT" "GGACCGAAG" "GTGCTAGAG" "GTCCCAAAG" "GTCCCAAAC" "GTCCCAAAA" "GGTCCATCG" "CGCCCTGTG" "CGCCCAGGC" "CGCCCAGGA" "GGCGGTGAG" "GGCACCGAT" "CGGCGAGAG" "GTCCCACGG" "GGCACCGAG" "GGCACCGAA" "GGCACCGAC" "GACCCATAT" "GGCCGAAAA" "GATCTAGAG" "CGCCTAGCG" "GGTTCAGAC" "GACCCATAG" "GACCCATAA" "GACCCATAC" "AGCTCATAG" "GGTTCAGAA" "GGCACATAT" "TGTGCAGAG" "GGCCGCTAG" "GCGCCTGAG" "GGCCTCTAG" "TGACCATAG" "GGCGCCAAG" "GGCACATAG" "GGCACATAA" "GGCACATAC" "GGCGGATAG" "GCGGCAGAG" "CGCCCGAAG" "GGTCCACGG" "AGTCCATAG" "GTCCCAGCG" "GGCCAAGAA" "GACTCAGCG" "GGCCAAGAG" "GTCCCAGCC" "GTCCCAGCA" "GGATCAGCG" "TCCCCATAG" "GCATCAGAG" "GGCCAAGAT" "GACCCGGAT" "AGCCGAGGG" "GGTCCAAAA" "GGTCCAAAC" "GGACTAGAT" "GCTCCCGAG" "GACCCGGAA" "GGCCCGTCG" "GACCCGGAC" "GACCCGGA
             ;; wow, this string conversion bs takes like 5 seconds...
             n1 (sort (map acgt-str-to-64b seqs))
             ans (sort (:b64 (neighborhood-acgt-64b 9 3 s1)))]
         (fact "matches the extra dataset"
               (count ans) => 2620
               (= ans n1) => true)))

;(count  (neighborhood-acgt-64b 32 3 (reduce-acgt-64b "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")))
;=> 138481 @ 00:01.000
;(count  (neighborhood-acgt-64b 32 4 (reduce-acgt-64b "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")))
;=> 3051241 @ 00:12.000
;(count  (neighborhood-acgt-64b 32 5 (reduce-acgt-64b "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")))
;=> 51985609 @ 05:00.000
;; not bad
;; if i just had a GPU method for filtering nils from lists, i could get 32,5 down to seconds
